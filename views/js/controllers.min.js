/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 * 
 * 
 */

//@see http://forge.taotesting.com/projects/tao/wiki/Front_js
define('taoItems/controller/routes',[],function(){
    
    
    return {
         'Items': {
            'deps' : 'controller/items',
            'actions' : {
                'getSectionActions' : 'controller/main/actions',
                'getSectionTrees' : 'controller/main/trees'
            }
        },
        'ItemPreview' : {
            'actions' : {
                'index' : 'controller/preview/itemRunner'
            }
        }
    };
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2013 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 *
 *
 */
define('taoItems/controller/items',['jquery', 'i18n', 'helpers', 'uiBootstrap', 'module'], function ($, __, helpers, uiBootstrap, module) {
        
        var $tabs = uiBootstrap.tabs;
        var authoringIndex = helpers.getTabIndexByName('items_authoring');
        var previewIndex = helpers.getTabIndexByName('items_preview');

        function setAuthoringItemLabel(label){
            var authoringLabel = (label) ? __('Authoring') + ': ' + label : __('Authoring');
            var previewLabel = (label) ?__('Preview') + ': ' + label : __('Preview') ;
            $('a#items_authoring').text(authoringLabel).attr('title', authoringLabel);
            $('a#items_preview').text(previewLabel).attr('title', previewLabel);
        }
        
        return {
            start : function(){
                var conf = module.config();
                if(conf.uri && conf.classUri){
                    if(conf.isAuthoringEnabled === true && conf.action !== 'authoring'){
                        $tabs.tabs('url', authoringIndex, conf.authoringUrl);
                        $tabs.tabs('enable', authoringIndex);
                    }
                    if(conf.isPreviewEnabled === true && conf.action !== 'preview'){
                        $tabs.tabs('url', previewIndex, conf.previewUrl);
                        $tabs.tabs('enable', previewIndex);
                    }
                    if(conf.label){
                        setAuthoringItemLabel(conf.label);
                    }
                } else {
                     setAuthoringItemLabel();
                    if(conf.action !== 'authoring'){
                        $tabs.tabs('disable', authoringIndex);
                    }
                    if(conf.action !== 'preview'){
                        $tabs.tabs('disable', previewIndex);
                    }
                }
                
                if(conf.reload){
                    uiBootstrap.initTrees();
                }
                if(conf.message){
                    helpers.createMessage(conf.message);
                }
            }
        };
});



define('serviceApi/ServiceApi',['jquery', 'urlParser', 'iframeResizer'], function($, UrlParser, iframeResizer){
    
    function ServiceApi(baseUrl, parameters, serviceCallId, stateStorage, userService){
        this.baseUrl = baseUrl;
        this.parameters = parameters;
        this.connected = false;

        this.serviceCallId = serviceCallId; 
        this.state = stateStorage;
        this.userService = userService;

        this.onFinishCallback;
        this.onKillCallback;
        this.onDisplayChangeCallback;
    }

    ServiceApi.SIG_SUCCESS = 0; 
    ServiceApi.SIG_ERROR = 1;
        
    ServiceApi.prototype.loadInto = function(frame, connected){
        var self = this;
        var callUrl = this.getCallUrl();        
        var isCORSAllowed = new UrlParser(callUrl).checkCORS();
        
        $(frame).one('load', function() {
            $(document).on('serviceready', function(){
                self.connect(frame, connected );
            });
            
        }).on('load.cors', function(e){
            //if we are  in the same domain, we add a variable
            //to the frame window, so the frame knows it can communicate
            //with the parent
            if(isCORSAllowed === true){
                frame.contentWindow.__knownParent__ = true;
            } 
        });
        
        $(frame).attr('src', callUrl);
    };

    ServiceApi.prototype.connect = function(frame, connected){
        if(this.connected === false && frame.contentWindow){
            //frame.contentWindow.serviceApi = this;
            if (typeof(frame.contentWindow.onServiceApiReady) === "function") {
                frame.contentWindow.onServiceApiReady(this);
                this.connected = true;
                if(typeof connected === 'function'){
                    connected();
                }
            }
        }
    };
    
    /**
     * Get the service call URL
     * @returns {String} the URI
     */
    ServiceApi.prototype.getCallUrl = function(){
        var params = this.parameters || {};
        params.serviceCallId = this.serviceCallId;
        return this.baseUrl + '?' + $.param(params);
    };

    ServiceApi.prototype.getUserPropertyValues = function(property, callback){
    	this.userService.get(property, callback);
    };
    
    //Context
    ServiceApi.prototype.getServiceCallId = function(){
        return this.serviceCallId;
    };

    //Context
    ServiceApi.prototype.getState = function(){
        return this.state.get();
    };

    ServiceApi.prototype.setState = function(state, callback){
        return this.state.set(state, callback);
    };

    // Variables 
    ServiceApi.prototype.getParameter = function(identifier){
        if (typeof(this.parameters[identifier]) !== "undefined") {
            return this.parameters[identifier];
        } else {
            return null;
        }
    };

    ServiceApi.prototype.onFinish = function(callback) {
        this.onFinishCallback = callback;	
    };

    ServiceApi.prototype.onKill = function(callback) {
        this.onKillCallback = callback;	
    };
    
    ServiceApi.prototype.kill = function(callback) {
    	if (typeof this.onKillCallback == 'function') {
    		this.onKillCallback(callback);
    	} else {
    		callback(0);
    	}
    };
    
    // Flow
    // valueArray are return parameters of the service.
    ServiceApi.prototype.finish = function(valueArray) {
            //return execution to service caller
            if (typeof this.onFinishCallback === 'function') {
                    this.onFinishCallback(valueArray);
            }
    };

    return ServiceApi;

});
define('serviceApi/PseudoStorage',[],function(){
    
    function PseudoStorage() {
    }

    PseudoStorage.prototype.get = function(callback){
        if (typeof callback === 'function') {
            callback(null);
        }
        return null;
    };

    PseudoStorage.prototype.set = function(state, callback){
        if (typeof callback === "function") {
            callback();
        }
    };

    return PseudoStorage;
});
define('serviceApi/UserInfoService',['jquery'], function($){
    
    function UserInfoService(requestUrl, data) {
        this.data = data;
        this.requestUrl = requestUrl;
    }

    UserInfoService.prototype.get = function(property, callback){
        if (this.data.hasOwnProperty(property)) {
            if (typeof callback === "function") {
                    callback(this.data[property]);
            }
        } else {
            $.ajax({
                url : this.requestUrl,
                data 		: {
                    'property' : property
                },
                type        : 'post',
                dataType	: 'json',
                success     : (function(service, callback) {return function(r) {
            		for (key in r.data) {
            			service.data[key] = r.data[key];
            		}
                    if (typeof callback === "function") {
                        callback(service.data[property]);
                    }

                }})(this, callback)
                /*	
            	function(r){
                    if(r.success){
                    	console.log(this.data);
                    	this.data[property] = r.values;
                    	//console.log(this.data);
	                    if (typeof callback === "function") {
	                        callback(this.data[property]);
	                    }
                    }
                }
                */
                
                
            });
        }
    };

    return UserInfoService;
});
define('taoItems/runtime/ItemServiceImpl',[ 'jquery' ], function($) {

    function ItemServiceImpl(data) {

        this.itemId = data.itemId;
        this.serviceApi = data.serviceApi;
        this.resultApi = data.resultApi || null;
        this.params = data.params || {};
        this.responses = {};
        this.scores = {};
        this.events = {};
        this.connected = false;

        var rawstate = this.serviceApi.getState();
        var state = (typeof rawstate === 'undefined' || rawstate === null) ? {}
                : $.parseJSON(rawstate);
        this.stateVariables = typeof state === 'object' ? state : {};

        this.beforeFinishCallbacks = [];
    }

    ItemServiceImpl.prototype.connect = function(frame) {
        if (this.connected === false && frame.contentWindow) {
            frame.contentWindow.itemApi = this;
            
            if (typeof (frame.contentWindow.onItemApiReady) === "function") {
                frame.contentWindow.onItemApiReady(this);
                this.connected = true;
            }
        }
    };

    // Response

    ItemServiceImpl.prototype.saveResponses = function(valueArray) {
        for ( var attrname in valueArray) {
            this.responses[attrname] = valueArray[attrname];
        }
    };

    ItemServiceImpl.prototype.traceEvents = function(eventArray) {
        for ( var attrname in eventArray) {
            this.events[attrname] = eventArray[attrname];
        }
    };

    // Scoring
    ItemServiceImpl.prototype.saveScores = function(valueArray) {
        for ( var attrname in valueArray) {
            this.scores[attrname] = valueArray[attrname];
        }
    };

    ItemServiceImpl.prototype.getUserPropertyValues = function(property,
            callback) {
        this.serviceApi.getUserPropertyValues(property, callback);
    };

    // Flow
    ItemServiceImpl.prototype.beforeFinish = function(callback) {
        this.beforeFinishCallbacks.push(callback);
    };

    ItemServiceImpl.prototype.finish = function() {
        var self = this;
        for ( var i = 0; i < this.beforeFinishCallbacks.length; i++) {
            this.beforeFinishCallbacks[i]();
        }

        this.submit(function() {
            self.serviceApi.finish();
        });
    };

    ItemServiceImpl.prototype.submit = function(after) {
        var self = this;

        this.serviceApi.setState(JSON.stringify(self.stateVariables),
                function() {
                    // todo add item, call id etc

                    if (self.resultApi) {
                        self.resultApi
                                .submitItemVariables(self.itemId,
                                        self.serviceApi.getServiceCallId(),
                                        self.responses, self.scores,
                                        self.events, self.params, after);
                    } else {
                        after();
                    }
                });
    }

    ItemServiceImpl.prototype.onKill = function(callback) {
        this.serviceApi.onKill(callback);
    };

    ItemServiceImpl.prototype.getVariable = function(identifier, callback) {
        if (typeof callback === 'function') {
            callback(this.stateVariables[identifier] || null);
        }
    };

    ItemServiceImpl.prototype.setVariable = function(identifier, value) {
        this.stateVariables[identifier] = value;
    };

    return ItemServiceImpl;
});
/*  
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * 
 * Copyright (c) 2008-2010 (original work) Deutsche Institut für Internationale Pädagogische Forschung (under the project TAO-TRANSFER);
 *               2009-2012 (update and modification) Public Research Centre Henri Tudor (under the project TAO-SUSTAIN & TAO-DEV);
 * 
 */
define('taoItems/preview-console',['jquery'], function($){
    /**
     * Get an url-formated parameters string, parse it and return a JSONized object
     * @param {String} params
     * @returns {Object}
     */
    function unserializeUrl(params){
        var data = {};
        var hashes = params.split('&');
        for(var i in hashes){
                    if(typeof hashes[i] == 'string'){
                            var hash = hashes[i].split('=');
                            if(hash.length == 2){
                                    if(/\[\]$/.test(hash[0])){
                                            var key = hash[0].replace(/\[\]$/, '');
                                            if(typeof(data[key]) == "undefined"){
                                                    data[key] = [];
                                            }
                                            data[key].push(hash[1]);
                                    }
                                    else{
                                            data[hash[0]] = hash[1];
                                    }
                            }
                    }
        }
        return data;
    }
    
    return {
        
        setup : function(){
    
	var timer = new Date();
	
	//get the console element in the top page
	var $previewConsole = $('#preview-console', window.top.document);
        var $consoleCtrls = $('.console-control', $previewConsole);
        var $consoleContent = $('.console-content', $previewConsole);
        var $consoleContentList = $('.console-content > ul', $previewConsole);
	
	//attach an updateConsole event, tobe triggered
	$previewConsole.bind('updateConsole', function(event, type, message){
		var hour = timer.getHours();
		var min	 = timer.getMinutes();
		var sec	 = timer.getSeconds();
		var logTime = ((hour>10)? hour : '0'+hour ) + ':' + ((min>10)? min : '0'+min) + ':' + ((sec>10)? sec: '0'+sec);
		$consoleContentList.append('<li><b>[' +  logTime  + '] ' + type + '</b>: ' + message + '</li>');
	});
	
	//controls: close console
	$(".ui-icon-circle-close", $consoleCtrls).on('click', function(event){
                event.preventDefault();
		$previewConsole.hide();
	});
	
	//controls: clean console
        $('.ui-icon-trash', $consoleCtrls).on('click', function(event){
                event.preventDefault();
		$consoleContentList.empty();
	});
	
	//controls: show/hide console
        $(".toggler", $consoleCtrls).on('click', function(event){
                event.preventDefault();
		$consoleContent.toggle();
                $(this).toggleClass('ui-icon-circle-minus')
                        .toggleClass('ui-icon-circle-plus');
	});
	
	//log in the console the ajax request to the Preview Api
	$('body').ajaxSuccess(function(event, request, settings){
		
		if(/LegacyPreviewApi/.test(settings.url)){
			
			var message = '';
			//taoApi Push
			if(/save$/.test(settings.url)){
				var data = unserializeUrl(decodeURIComponent(settings.data));
				for(var key in data){
					if(key !== 'token'){
						message += '<br />' + key + ' = '  + data[key] ;
					}
				}
				if(message !== ''){
					message += '<br />';
					$previewConsole.trigger('updateConsole', ['push data', message]);
				}
			}
			
			//taoApi events
			else if(/traceEvents$/.test(settings.url)){
				var data = unserializeUrl(decodeURIComponent(settings.data));
				if(data.events){
					for(var index in data.events){
						try{
							var eventData = $.parseJSON(data.events[index]);
							message += '<br />' + eventData.type + ' on element ' + eventData.name;
							if(eventData.id !== 'noID'){
								message += '[id=' + eventData.id +']';
							}
						}catch(exp){ }
					}
					message += '<br />';
					$previewConsole.trigger('updateConsole', ['trace events', message]);
				}
			}
			
			//wfApi saving context 
			else if(/saveContext$/.test(settings.url)){
				var data = unserializeUrl(decodeURIComponent(settings.data));
					for(key in data){
						if(key !== 'token'){
							message += '<br />' + key + ' = ' + data[key];
						}
					}
					message += '<br />';
					$previewConsole.trigger('updateConsole', ['save context', message]);				
			}
			
			//wfApi retrieve context 
			else if(/retrieveContext$/.test(settings.url)){
				var data = unserializeUrl(decodeURIComponent(settings.data));
					for(key in data){
						if(key !== 'token'){
							message += '<br />' + key + ' = ' + data[key];
						}
					}
					message += '<br />';
					$previewConsole.trigger('updateConsole', ['retrieved context', message]);				
			}
			
			//taoMatching data
			else if(/evaluate$/.test(settings.url)){
				var data = unserializeUrl(decodeURIComponent(settings.data));
				if(data.data){
					try{
						var matchingDataList = $.parseJSON(data.data);
						for(key in matchingDataList){
							message += '<br />' + matchingDataList[key]['identifier'] + ' = ' + matchingDataList[key]['value'];
						}
					}catch(exp){ 
						//console.log(exp);
					}
					message += '<br />';
					$previewConsole.trigger('updateConsole', ['sent answers', message]);
				}
			}
			
			//others requests
			else{
				message = 	'<br />' + 
							settings.type + ' ' + 
							settings.url + ' ? ' + 
							decodeURIComponent(settings.data) + ' => ' +
							request.responseText;
				$previewConsole.trigger('updateConsole', ['remote request', message]);
			}
		}
            });
        }
    };
});
/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2013 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 *
 *
 */
define(
'taoItems/controller/preview/itemRunner',['module', 'jquery', 'lodash', 'serviceApi/ServiceApi', 'serviceApi/PseudoStorage', 
'serviceApi/UserInfoService', 'taoItems/runtime/ItemServiceImpl', 'taoItems/preview-console', 'urlParser', 'iframeResizer'], 
function(module, $, _, ServiceApi, PseudoStorage, UserInfoService, ItemServiceImpl, previewConsole,  UrlParser, iframeResizer){
    
    var previewItemRunner = {
        
        start : function(options){
           
           var conf = _.merge(module.config(), options || {});
           
           if(conf.previewUrl){
                
                previewConsole.setup();
               
                var resultServer = _.defaults(conf.resultServer, {
                    module : 'taoResultServer/ResultServerApi',
                    endpoint : '',
                    params  : {}
                });
                
            //load dynamically the right ResultServerApi
            require([resultServer.module], function(ResultServerApi){
                
                var resultServerApi = new ResultServerApi(
                    resultServer.endpoint, 
                    resultServer.params
                );

                var serviceApi = new ServiceApi(
                    conf.previewUrl, 
                    {}, 
                    'preview', 
                    new PseudoStorage(), 
                    new UserInfoService(conf.userInfoServiceRequestUrl, {})
                );

                var itemApi = new ItemServiceImpl({
                    serviceApi: serviceApi,
                    resultApi: resultServerApi
                });

                var callUrl = new UrlParser(serviceApi.getCallUrl());
                var isCORSAllowed = callUrl.checkCORS();
                callUrl.addParam('clientConfigUrl', conf.clientConfigUrl);

                var $frame = $('#preview-container');

                iframeResizer.autoHeight($frame, 'body', 10);
                $frame.on('load', function() {
                    var frame = this;

                    //1st try to connect the api on frame load
                    itemApi.connect(frame);

                    //if we are  in the same domain, we add a variable
                    //to the frame window, so the frame knows it can communicate
                    //with the parent
                    if (isCORSAllowed === true) {
                        frame.contentWindow.__knownParent__ = true;
                    }
                    //then we can wait a specific event triggered from the item
                    $(document).on('itemready', function() {
                        itemApi.connect(frame);
                    });

                });
                $('#preview-container').attr('src', callUrl.getUrl());

                $('#finishButton').click(function() {
                    itemApi.finish();
                });
           });
       }
     }
   };
   
   return previewItemRunner;
});
/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2013 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 *
 *
 */
define('taoItems/controller/runtime/itemRunner',['jquery', 'lodash', 'iframeResizer', 'iframeNotifier', 'urlParser'],
    function($, _, iframeResizer, iframeNotifier, UrlParser){

        var itemRunner = {
            start : function(options){

                var $frame = $('<iframe id="item-container" class="toolframe" frameborder="0" style="width:100%;height:100%;overflow:hidden" scrolling="no"></iframe>');
                $frame.appendTo('body');
                var itemId = options.itemId;
                var itemPath = options.itemPath;
                var resultServer = _.defaults(options.resultServer, {
                    module : 'taoResultServer/ResultServerApi',
                    params : {}
                });
                var itemService = _.defaults(options.itemService, {
                    module : 'taoItems/runtime/ItemServiceImpl',
                    params : {}
                });
                var clientConfigUrl = options.clientConfigUrl;

                //load dynamically the right ItemService and ResultServerApi
                require([itemService.module, resultServer.module], function(ItemService, ResultServerApi){

                    var resultServerApi = new ResultServerApi(resultServer.endpoint, resultServer.params);

                    window.onServiceApiReady = function(serviceApi){
                        
                        var itemApi = new ItemService(_.merge({
                            serviceApi : serviceApi,
                            itemId : itemId,
                            resultApi : resultServerApi
                        }, {
                            params : itemService.params
                        }));

                        var itemUrl = new UrlParser(itemPath);
                        var isCORSAllowed = itemUrl.checkCORS();
                        itemUrl.addParam('clientConfigUrl', clientConfigUrl);

                        iframeResizer.autoHeight($frame, 'body', 10);
                        
                        $(document).on('itemloaded', function() {
                            iframeNotifier.parent('serviceloaded');
                        });
                        
                        $(document).on('itemready', function() {
                            // item is ready, we can connect.
                            itemApi.connect($frame[0]);
                        });
                        
                        if (navigator.userAgent.indexOf("MSIE") > -1 && !window.opera) {
                            // IE i.e. Internet Explorer
                            $frame[0].onreadystatechange = function() {
                                
                                if ($frame[0].readyState == "complete") {
                                    
                                    if (isCORSAllowed === true) {
                                        this.contentWindow.__knownParent__ = true;
                                    }
                                }
                            };
                        } 
                        else {
                            // Not IE a.k.a. Real Browser.
                            
                            $frame[0].onload = function(){
                                if (isCORSAllowed === true) {
                                    this.contentWindow.__knownParent__ = true;
                                }
                            };
                        }
                        
                        $frame[0].src = itemUrl.getUrl();
                    };

                    //tell the parent he can trigger onServiceApiReady
                    iframeNotifier.parent('serviceready');
                });
            }
        };

        return itemRunner;
    });
